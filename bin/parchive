#!/usr/bin/env infinity-env
# ------------------------------------------------------------------------------

function archive_runtime_files() {
    if [ $# -ne 3 ]; then
        echo "" 1>&2
        echo "ERROR: Three arguments are required for the 'runtime' mode!" 1>&2
        echo "       parchive runtime <start> <current> <format>" 1>&2
        echo "" 1>&2
        return 1
    fi

    INF_START=$1
    INF_CURRENT=$2
    INF_FORMAT=$3

    if [ "$INF_START" -eq "$INF_CURRENT" ]; then
        echo "NOTE: the first run - no runtime files are archived"
        return 0
    fi
    # rename files
    OLD="$INF_JOB_NAME#"`printf "%03d" "$(($INF_CURRENT-1))"`
    NEW=`printf "$INF_FORMAT" "$(($INF_CURRENT-1))"`

    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "Data transfer: local mode ..."
        echo "${OLD}.info -> $INF_ARCHIVE_DIR/${NEW}.info"
        echo "${OLD}.stdout -> $INF_ARCHIVE_DIR/${NEW}.stdout"
        echo "${OLD}.infout -> $INF_ARCHIVE_DIR/${NEW}.infout"
        echo "Removed: ${OLD}.infkey" "${OLD}.infex" "${OLD}.gpus" "${OLD}.nodes" "${OLD}.mpinodes"

        cd $INF_INPUT_DIR
        if [ $? -ne 0 ]; then exit 1; fi
        mv "${OLD}.info" "$INF_ARCHIVE_DIR/${NEW}.info"
        mv "${OLD}.stdout" "$INF_ARCHIVE_DIR/${NEW}.stdout"
        mv "${OLD}.infout" "$INF_ARCHIVE_DIR/${NEW}.infout"
        rm -f "${OLD}.infkey" "${OLD}.infex" "${OLD}.gpus" "${OLD}.nodes" "${OLD}.mpinodes"
    else
        echo "Data transfer: remote mode ..."
        echo "${OLD}.info -> $INF_ARCHIVE_DIR/${NEW}.info"
        echo "${OLD}.stdout -> $INF_ARCHIVE_DIR/${NEW}.stdout"
        echo "${OLD}.infout -> $INF_ARCHIVE_DIR/${NEW}.infout"
        echo "Removed: ${OLD}.infkey" "${OLD}.infex" "${OLD}.gpus" "${OLD}.nodes" "${OLD}.mpinodes"

        ssh $INF_INPUT_MACHINE \
            "cd $INF_INPUT_DIR; \
            if [ $? -ne 0 ]; then exit 1; fi; \
            mv \"${OLD}.info\" \"$INF_ARCHIVE_DIR/${NEW}.info\"; \
            mv \"${OLD}.stdout\" \"$INF_ARCHIVE_DIR/${NEW}.stdout\"; \
            mv \"${OLD}.infout\" \"$INF_ARCHIVE_DIR/${NEW}.infout\"; \
            rm -f \"${OLD}.infkey\" \"${OLD}.infex\" \"${OLD}.gpus\" \"${OLD}.nodes\" \"${OLD}.mpinodes\""
    fi
}

# ------------------------------------------------------------------------------

function get_data_from_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to get from the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    inf-retry-cmd inf-copy-from-archive "$@"

    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: Unable to get specified data from the archive!" 1>&2
        echo "" 1>&2
        exit 1
    fi
}

# ------------------------------------------------------------------------------

function write_to_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to write to the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    inf-retry-cmd inf-copy-to-archive "$@"

    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: Unable to get specified data from the archive!" 1>&2
        echo "" 1>&2
        exit 1
    fi
}

# ------------------------------------------------------------------------------

function move_to_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to move to the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    # write data to the archive
    write_to_archive "$@"
    if [ $? -ne 0 ]; then return 1; fi

    # remove files
    rm -f "$@"
}

# ------------------------------------------------------------------------------

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# parchive - manipulation with the job data archive"
echo "# ------------------------------------------------------------------------------"

case $1 in
    runtime | get | write | move )
        INF_MODE=$1
        ;;
    * )
        echo "" 1>&2
        echo " >>> ERROR: Unsupported action: $1" 1>&2
        echo "            Supported action: runtime | get | write | move" 1>&2
        echo "                parchive runtime <start> <current> <format>" 1>&2
        echo "                parchive get   <file1> [file2] ..." 1>&2
        echo "                parchive write <file1> [file2] ..." 1>&2
        echo "                parchive move  <file1> [file2] ..." 1>&2
        echo "" 1>&2
        exit 1
        ;;
esac

# remove the first argument from the stack
shift

# write summary of job setup
echo "# Archive directory   : $INF_ARCHIVE_DIR"
echo "# Requested action    : $INF_MODE"
echo "# Arguments           : $*"

if  [ -z "$INF_JOB_NAME" ] || [ -z "$INF_INPUT_MACHINE" ] || [ -z "$INF_INPUT_DIR" ] || [ -z "$INF_WORK_DIR" ] || \
    [ -z "$INF_SSH_OPTIONS" ] || [ -z "$INF_RETRY_COUNT" ] || \
    [ -z "$INF_RETRY_TIME" ] || [ -z "$INF_LOCAL_INPUT_DATA" ] || [ -z "$ABS_ROOT" ] || [ -z "$INF_ARCHIVE_DIR" ]; then
    echo "" 1>&2
    echo " >>> ERROR: This command must be run in the Infinity environment!" 1>&2
    echo "" 1>&2
    exit 1
fi

if [ $# -eq 0 ]; then
    echo "" 1>&2
    echo " >>> ERROR: No files are specified for archiving!" 1>&2
    echo "" 1>&2
    exit 1
fi

# ------------------------------------------------------------------------------

# load ABS library
source $ABS_ROOT/share/scripts/abs-execution-script-LL

case $INF_MODE in
    runtime )
        inf-retry-cmd archive_runtime_files "$@"
        ;;
    get )
        get_data_from_archive "$@"
        ;;
    write )
        write_to_archive "$@"
        ;;
    move )
        move_to_archive "$@"
        ;;
esac

EXIT_CODE=$?

echo "# ------------------------------------------------------------------------------"
echo ""

exit $EXIT_CODE
