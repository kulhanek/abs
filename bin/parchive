#!/usr/bin/env infinity-env
# ------------------------------------------------------------------------------

function archive_runtime_files() {
    if [ $# -ne 3 ]; then
        echo "" 1>&2
        echo "ERROR: Three arguments are required for the 'runtime' mode!" 1>&2
        echo "       parchive runtime <dummy> <dummy> <format>" 1>&2
        echo "" 1>&2
        return 1
    fi

    INF_FORMAT=$3
    echo

    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "Data transfer: local mode ..."

        cd $INF_INPUT_DIR
        if [ $? -ne 0 ]; then exit 1; fi

        $ABS_ROOT/sbin/abs-update-infofile archive --format "$INF_FORMAT"

    else
        echo "Data transfer: remote mode ..."

        if [ "$INF_INPUT_MACHINE_ENABLED_FOR_EXEC" == "YES" ]; then
            ssh $INF_INPUT_MACHINE \
                "cd $INF_INPUT_DIR; \
                if [ $? -ne 0 ]; then exit 1; fi; \
                $ABS_ROOT/sbin/abs-update-infofile archive --format \"$INF_FORMAT\""
        else
            if [ "$INF_INPUT_MACHINE_ENABLED_FOR_EXEC" == "NO" ]; then
                if [ -z "$INF_SURROGATE_MACHINES" ]; then
                    echo "" >&2
                    echo " >>> ERROR: No surrogate machines defined!" >&2
                    echo "" >&2
                    exit 1
                fi
                while read INF_INPUT_MACHINE; do
                    echo ""
                    echo -n "Testing surrogate machine '$INF_INPUT_MACHINE' ... "
                    ssh -x $INF_SSH_OPTIONS "$INF_INPUT_MACHINE" echo &> /dev/null
                    if [ $? -eq 0 ]; then
                        echo "success"
                        ssh $INF_INPUT_MACHINE \
                            "cd $INF_INPUT_DIR; \
                            if [ $? -ne 0 ]; then exit 1; fi; \
                            $ABS_ROOT/sbin/abs-update-infofile archive --format \"$INF_FORMAT\""
                    else
                        echo "failure"
                    fi
                done < <( echo "$INF_SURROGATE_MACHINES" | tr ',' '\n' )
            else
                echo "" >&2
                echo " >>> ERROR: INF_INPUT_MACHINE_ENABLED_FOR_EXEC = '$INF_INPUT_MACHINE_ENABLED_FOR_EXEC' but YES/NO expected!" >&2
                echo "" >&2
                exit 1
            fi
        fi
    fi
}

# ------------------------------------------------------------------------------

function get_data_from_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to get from the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    inf-retry-cmd inf-copy-from-archive "$@"

    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: Unable to get specified data from the archive!" 1>&2
        echo "" 1>&2
        exit 1
    fi
}

# ------------------------------------------------------------------------------

function write_to_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to write to the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    inf-retry-cmd inf-copy-to-archive "$@"

    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: Unable to get specified data from the archive!" 1>&2
        echo "" 1>&2
        exit 1
    fi
}

# ------------------------------------------------------------------------------

function move_to_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to move to the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    # write data to the archive
    write_to_archive "$@"
    if [ $? -ne 0 ]; then return 1; fi

    # remove files
    rm -f "$@"
}

# ------------------------------------------------------------------------------

echo ""
echo "# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "# parchive - manipulation with the job data archive"
echo "# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

case $1 in
    runtime | get | tryget | write | move )
        INF_MODE=$1
        ;;
    * )
        echo "" 1>&2
        echo " >>> ERROR: Unsupported action: $1" 1>&2
        echo "            Supported action: runtime | get | write | move" 1>&2
        echo "                parchive runtime <dummy> <dummy> <format>" 1>&2
        echo "                parchive get    <file1> [file2] ..." 1>&2
        echo "                parchive tryget <file1> [file2] ..." 1>&2
        echo "                parchive write  <file1> [file2] ..." 1>&2
        echo "                parchive move   <file1> [file2] ..." 1>&2
        echo "" 1>&2
        exit 1
        ;;
esac

# remove the first argument from the stack
shift

# write summary of job setup
echo "# Archive directory   : $INF_ARCHIVE_DIR"
echo "# Requested action    : $INF_MODE"
echo "# Arguments           : $*"

if  [ -z "$INF_JOB_NAME" ] || [ -z "$INF_INPUT_MACHINE" ] || [ -z "$INF_INPUT_DIR" ] || [ -z "$INF_WORK_DIR" ] || \
    [ -z "$INF_SSH_OPTIONS" ] || [ -z "$INF_RETRY_COUNT" ] || \
    [ -z "$INF_RETRY_TIME" ] || [ -z "$INF_LOCAL_INPUT_DATA" ] || [ -z "$ABS_ROOT" ] || [ -z "$INF_ARCHIVE_DIR" ]; then
    echo "" 1>&2
    echo " >>> ERROR: This command must be run in the Infinity environment!" 1>&2
    echo "" 1>&2
    exit 1
fi

if [ $# -eq 0 ]; then
    echo "" 1>&2
    echo " >>> ERROR: No files are specified for archiving!" 1>&2
    echo "" 1>&2
    exit 1
fi

# ------------------------------------------------------------------------------

# load ABS library
source $ABS_ROOT/share/scripts/abs-execution-script-LL

case $INF_MODE in
    runtime )
        inf-retry-cmd archive_runtime_files "$@"
        EXIT_CODE=$?
        ;;
    autoruntime )
        inf-retry-cmd archive_runtime_files_auto "$@"
        EXIT_CODE=$?
        ;;
    get )
        get_data_from_archive "$@"
        EXIT_CODE=$?
        ;;
    tryget )
        export INF_RSYNC_EXTRA_OPTS="--ignore-missing-args"
        get_data_from_archive "$@"
        EXIT_CODE=$?
        unset INF_RSYNC_EXTRA_OPTS
        ;;
    write )
        write_to_archive "$@"
        EXIT_CODE=$?
        ;;
    move )
        move_to_archive "$@"
        EXIT_CODE=$?
        ;;
esac

echo "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
echo ""

exit $EXIT_CODE
