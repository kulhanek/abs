#!/usr/bin/env infinity-env
# ------------------------------------------------------------------------------

function archive_runtime_files() {
    if [ $# -ne 3 ]; then
        echo "" 1>&2
        echo "ERROR: Three arguments are required for the 'runtime' mode!" 1>&2
        echo "       parchive runtime <dummy> <dummy> <format>" 1>&2
        echo "" 1>&2
        return 1
    fi

    INF_FORMAT=$3

    RET_STATUS=1

    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "# Data transfer       : local mode ..."

        cd $INF_INPUT_DIR
        if [ $? -ne 0 ]; then exit 1; fi

        $ABS_ROOT/sbin/abs-update-infofile archive --format "$INF_FORMAT"
        RET_STATUS=$?
    else   
        echo "# Data transfer       : remote mode ..."

        # sanity checks
        if [ "$INF_INPUT_MACHINE_ENABLED_FOR_EXEC" == "NO" ]; then
            if [ -z "$INF_SURROGATE_MACHINES" ]; then
                echo "" >&2
                echo " >>> ERROR: No surrogate machines defined!" >&2
                echo "" >&2
                exit 1
            fi
        fi

        # input machines
        INF_INPUT_MACHINE_LIST=""

        if [ "$INF_INPUT_MACHINE_ENABLED_FOR_EXEC" == "YES" ]; then
            echo "# input machine      : $INF_INPUT_MACHINE"
            INF_INPUT_MACHINE_LIST="$INF_INPUT_MACHINE"
        fi
        if [ -n "$INF_SURROGATE_MACHINES" ]; then
            echo "# surrogate machines : $INF_SURROGATE_MACHINES"
            INF_INPUT_MACHINE_LIST="${INF_INPUT_MACHINE_LIST},${INF_SURROGATE_MACHINES}"
        fi

        while read INF_INPUT_MACHINE; do
            echo ""
            echo -n "Testing surrogate machine '$INF_INPUT_MACHINE' ... "
            ssh -x $INF_SSH_OPTIONS  -o ConnectTimeout=60 "$INF_INPUT_MACHINE" echo &> /dev/null
            if [ $? -eq 0 ]; then
                echo "connection available"
            else
                echo "no connection available, trying the next one ..."
                continue
            fi
            ssh $INF_INPUT_MACHINE \
                "if [ -f ~/.bash_profile ]; then . ~/.bash_profile; fi; \
                if [ -z \"\$AMS_ROOT\" ]; then \
                    source \"$INF_BOOT_SCRIPT\"; \
                fi; \
                site activate $INF_SITE_ID; \
                cd $INF_INPUT_DIR; \
                if [ $? -ne 0 ]; then exit 1; fi; \
                $ABS_ROOT/sbin/abs-update-infofile archive --format \"$INF_FORMAT\""
            if [ $? -eq 0 ]; then
                RET_STATUS=0
                break
            fi

            echo "" >&2
            echo " >>> ERROR: Unable to archive runtimefiles!" >&2
            echo "            See error messages above." >&2
            echo "            Trying the next input machine ..." >&2
            echo "" >&2

            # put some small delay
            sleep 60

        done < <( echo "$INF_SURROGATE_MACHINES" | tr ',' '\n' | uniq )
    fi

    return $RET_STATUS
}

# ------------------------------------------------------------------------------

function get_data_from_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to get from the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    inf-retry-cmd inf-copy-from-archive "$@"

    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: Unable to get specified data from the archive!" 1>&2
        echo "" 1>&2
        exit 1
    fi
}

# ------------------------------------------------------------------------------

function write_to_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to write to the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    inf-retry-cmd inf-copy-to-archive "$@"

    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: Unable to get specified data from the archive!" 1>&2
        echo "" 1>&2
        exit 1
    fi
}

# ------------------------------------------------------------------------------

function move_to_archive() {

    if [ $# -eq 0 ]; then
        echo "" 1>&2
        echo " >>> ERROR: No files to move to the archive!" 1>&2
        echo "" 1>&2
        return 1
    fi

    # write data to the archive
    write_to_archive "$@"
    if [ $? -ne 0 ]; then return 1; fi

    # remove files
    rm -f "$@"
}

# ------------------------------------------------------------------------------

echo ""
echo "# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "# parchive - manipulation with the job data archive"
echo "# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

case $1 in
    runtime | get | tryget | write | move )
        INF_MODE=$1
        ;;
    * )
        echo "" 1>&2
        echo " >>> ERROR: Unsupported action: $1" 1>&2
        echo "            Supported action: runtime | get | write | move" 1>&2
        echo "                parchive runtime <dummy> <dummy> <format>" 1>&2
        echo "                parchive get    <file1> [file2] ..." 1>&2
        echo "                parchive tryget <file1> [file2] ..." 1>&2
        echo "                parchive write  <file1> [file2] ..." 1>&2
        echo "                parchive move   <file1> [file2] ..." 1>&2
        echo "" 1>&2
        exit 1
        ;;
esac

# remove the first argument from the stack
shift

# write summary of job setup
echo "# Archive directory   : $INF_ARCHIVE_DIR"
echo "# Requested action    : $INF_MODE"
echo "# Arguments           : $*"

if  [ -z "$INF_JOB_NAME" ] || [ -z "$INF_INPUT_MACHINE" ] || [ -z "$INF_INPUT_DIR" ] || [ -z "$INF_WORK_DIR" ] || \
    [ -z "$INF_SSH_OPTIONS" ] || [ -z "$INF_RETRY_COUNT" ] || \
    [ -z "$INF_RETRY_TIME" ] || [ -z "$INF_LOCAL_INPUT_DATA" ] || [ -z "$ABS_ROOT" ] || [ -z "$INF_ARCHIVE_DIR" ]; then
    echo "" 1>&2
    echo " >>> ERROR: This command must be run in the Infinity environment!" 1>&2
    echo "" 1>&2
    exit 1
fi

if [ $# -eq 0 ]; then
    echo "" 1>&2
    echo " >>> ERROR: No files are specified for archiving!" 1>&2
    echo "" 1>&2
    exit 1
fi

# ------------------------------------------------------------------------------

# load ABS library
source $ABS_ROOT/share/scripts/abs-execution-script-LL

case $INF_MODE in
    runtime )
        inf-retry-cmd archive_runtime_files "$@"
        EXIT_CODE=$?
        ;;
    get )
        get_data_from_archive "$@"
        EXIT_CODE=$?
        ;;
    tryget )
        export INF_RSYNC_EXTRA_OPTS="--ignore-missing-args"
        get_data_from_archive "$@"
        EXIT_CODE=$?
        unset INF_RSYNC_EXTRA_OPTS
        ;;
    write )
        write_to_archive "$@"
        EXIT_CODE=$?
        ;;
    move )
        move_to_archive "$@"
        EXIT_CODE=$?
        ;;
esac

echo "# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
echo ""

exit $EXIT_CODE
