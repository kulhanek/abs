#!/bin/bash
# ==============================================================================
# ABS
# (c) 2017, Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2012, Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2008-2009, Petr Kulhanek, kulhanek@chemi.muni.cz
# Charon Extension Layer v0.9
# (c) 2006, Petr Kulhanek, kulhanek@chemi.muni.cz
# Charon Extension Layer v0.8
# (c) 2005, Petr Kulhanek, kulhanek@chemi.muni.cz
# based on LCC module v1 - v5
# (c) 2001-2004, Petr Kulhanek, kulhanek@chemi.muni.cz
# ==============================================================================

# ==============================================================================
# retry execution of the command several times
# INF_RETRY_COUNT - number of retries
# INF_RETRY_TIME - time between repeats in seconds

function inf-retry-cmd()
{
    if [ -z "$INF_RETRY_COUNT" ]; then
        INF_RETRY_COUNT=3
    fi
    if [ -z "$INF_RETRY_TIME" ]; then
        INF_RETRY_TIME=600
    fi
    local INF_I
    for((INF_I=0; INF_I <= $INF_RETRY_COUNT; INF_I++)); do
        eval "$*"
        if [ $? -eq 0 ]; then
            return 0
        fi
        echo "! command failed - it will be re-executed in $INF_RETRY_TIME seconds ..."
        sleep $INF_RETRY_TIME
    done
    return 1
}

# ==============================================================================

function inf-copy-from-inputdir() 
{
    echo ""
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "= inf-copy-from-inputdir:"

    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "  > rsyncing the data from the local mount ... "
        echo "    $INF_LW_RSYNCOPTS $INF_INPUT_DIR/$1 -> $2"
        echo ""
        $ABS_RSYNC -av $INF_LW_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$INF_INPUT_DIR/$1" "$2"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            return 0
        fi
        echo "  !failure"
    fi

    echo "  > rsyncing the data from the storage machine via scp ... "
    echo "    $INF_SW_RSYNCOPTS $INF_STORAGE_MACHINE:$INF_STORAGE_DIR/$1 -> $2"
    echo ""
    # do not use abs-rsync here, see RT#209118 and RT#209712
    $ABS_RSYNC -av $INF_SW_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
            "$INF_STORAGE_MACHINE:$INF_STORAGE_DIR/$1" "$2"
    if [ $? -eq 0 ]; then
        echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        return 0
    fi
    echo "  !failure"

    if [ "$INF_INPUT_MACHINE_ENABLED_FOR_DATA" == "YES" ]; then
        echo "  > rsyncing the data from the input machine via scp ... "
        echo "    $INF_IW_RSYNCOPTS  $INF_INPUT_MACHINE:$INF_INPUT_DIR/$1 -> $2"
        echo ""
        $ABS_RSYNC -av $INF_IW_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$INF_INPUT_MACHINE:$INF_INPUT_DIR/$1" "$2"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            return 0
        fi
        echo "  !failure"
    fi

    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    return 1
}

# ==============================================================================

function inf-copy-to-inputdir() 
{
    echo ""
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "= inf-copy-to-inputdir:"

    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "  > rsyncing the data to the local mount ... "
        echo "    $INF_WL_RSYNCOPTS $1 -> $INF_INPUT_DIR/$2"
        echo ""
        $ABS_RSYNC -av $INF_WL_RSYNCOPTS \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$1" "$INF_INPUT_DIR/$2"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            return 0
        fi
        echo "  !failure"
    fi

    echo "  > rsyncing the data to the storage machine via scp ... "
    echo "    $INF_WS_RSYNCOPTS $1 -> $INF_STORAGE_MACHINE:$INF_STORAGE_DIR/$2"
    echo ""
    # do not use abs-rsync here, see RT#209118 and RT#209712
    $ABS_RSYNC -av $INF_WS_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
            "$1" "$INF_STORAGE_MACHINE:$INF_STORAGE_DIR/$2"
    if [ $? -eq 0 ]; then
        echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        return 0
    fi
    echo "  !failure"

    if [ "$INF_INPUT_MACHINE_ENABLED_FOR_DATA" == "YES" ]; then
        echo "  > rsyncing the data to the input machine via scp ... "
        echo "    $INF_WI_RSYNCOPTS $1 -> $INF_INPUT_MACHINE:$INF_INPUT_DIR/$2"
        echo ""
        $ABS_RSYNC -av $INF_WI_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$1" "$INF_INPUT_MACHINE:$INF_INPUT_DIR/$2"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            return 0
        fi
        echo "  !failure"
    fi

    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    return 1
}

# ==============================================================================

function inf-copy-from-archive()
{

    LFILES=""
    RFILES=""
    while [ $# -ne 0 ]; do
        LFILES="$LFILES$INF_INPUT_DIR/$INF_ARCHIVE_DIR/$1 "
        RFILES="$RFILES:$INF_INPUT_DIR/$INF_ARCHIVE_DIR/$1 "
        shift
    done

    echo ""
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "= inf-copy-from-archive:"

    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "  > rsyncing the data from the local mount ... "
        echo "    $INF_LW_RSYNCOPTS $LFILES -> $PWD"
        echo ""
        $ABS_RSYNC -av $INF_LW_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                $LFILES "$PWD/"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            return 0
        fi
        echo "  !failure"
    fi

    echo "  > rsyncing the data from the storage machine via scp ... "
    echo "    $INF_SW_RSYNCOPTS $INF_STORAGE_MACHINE$RFILES -> $PWD"
    echo ""
    # do not use abs-rsync here, see RT#209118 and RT#209712
    $ABS_RSYNC -av $INF_SW_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
            $INF_STORAGE_MACHINE$RFILES "$PWD/"
    if [ $? -eq 0 ]; then
        echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        return 0
    fi
    echo "  !failure"

    if [ "$INF_INPUT_MACHINE_ENABLED_FOR_DATA" == "YES" ]; then
        echo "  > rsyncing the data from the input machine via scp ... "
        echo "    $INF_IW_RSYNCOPTS  $INF_INPUT_MACHINE$RFILES  -> $PWD"
        echo ""
        $ABS_RSYNC -av $INF_IW_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                $INF_INPUT_MACHINE$RFILES "$PWD/"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            return 0
        fi
        echo "  !failure"
    fi

    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    return 1
}

# ==============================================================================

function inf-copy-to-archive()
{
    echo ""
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "= inf-copy-to-archive:"

    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "  > rsyncing the data to the local mount ... "
        echo "    $INF_WL_RSYNCOPTS $@ -> $INF_INPUT_DIR/$INF_ARCHIVE_DIR/"
        echo ""
        $ABS_RSYNC -av $INF_WL_RSYNCOPTS \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$@" "$INF_INPUT_DIR/$INF_ARCHIVE_DIR/"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            return 0
        fi
        echo "  !failure"
    fi

    echo "  > rsyncing the data to the storage machine via scp ... "
    echo "    $INF_WS_RSYNCOPTS $@ -> $INF_STORAGE_MACHINE:$INF_STORAGE_DIR/$INF_ARCHIVE_DIR/"
    echo ""
    # do not use abs-rsync here, see RT#209118 and RT#209712
    $ABS_RSYNC -av $INF_WS_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
            "$@" "$INF_STORAGE_MACHINE:$INF_STORAGE_DIR/$INF_ARCHIVE_DIR/"
    if [ $? -eq 0 ]; then
        echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        return 0
    fi
    echo "  !failure"

    if [ "$INF_INPUT_MACHINE_ENABLED_FOR_DATA" == "YES" ]; then
        echo "  > rsyncing the data to the input machine via scp ... "
        echo "    $INF_WI_RSYNCOPTS $@ -> $INF_INPUT_MACHINE:$INF_INPUT_DIR/$INF_ARCHIVE_DIR/"
        echo ""
        $ABS_RSYNC -av $INF_WI_RSYNCOPTS -e "ssh -x $INF_SSH_OPTIONS" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$@" "$INF_INPUT_MACHINE:$INF_INPUT_DIR/$INF_ARCHIVE_DIR/"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            return 0
        fi
        echo "  !failure"
    fi

    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    return 1
}

# ==============================================================================

function inf-rsync-from-inputdir()
{
    echo ""
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "= inf-rsync-from-inputdir:"
    # create file with excluded files
    # ${INF_WHOLE_NAME}.infout has to be excluded because of pstart
    echo "${INF_WHOLE_NAME}.infout" > $TMPDIR/${_TNAME_}.excluded
    echo "*#???.*"  >> $TMPDIR/${_TNAME_}.excluded
    echo "pjob???" >> $TMPDIR/${_TNAME_}.excluded
    if [ -n "$INF_EXCLUDED_FILES" ]; then
        echo "$INF_EXCLUDED_FILES" | tr ";" "\n" >> $TMPDIR/${_TNAME_}.excluded
    fi
    echo "  > Final exclusion list:"
    cat $TMPDIR/${_TNAME_}.excluded | awk '{ printf("    %s\n",$0); }'

    echo ""
    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "  > rsyncing from the local mount ... "
        echo "    $INF_LW_RSYNCOPTS $INF_INPUT_DIR/ -> $INF_WORK_DIR/"
        echo ""
        $ABS_RSYNC -av $INF_LW_RSYNCOPTS --exclude-from="$TMPDIR/${_TNAME_}.excluded" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$INF_INPUT_DIR/" "$INF_WORK_DIR/"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            rm -f $TMPDIR/${_TNAME_}.excluded
            return 0
        fi
        echo "  !failure"
    fi

    echo "  > rsyncing from the storage machine via scp ... "
    echo "    $INF_SW_RSYNCOPTS $INF_STORAGE_MACHINE:$INF_STORAGE_DIR/ -> $INF_WORK_DIR/"
    echo ""
    # do not use abs-rsync here, see RT#209118 and RT#209712
    $ABS_RSYNC -av $INF_SW_RSYNCOPTS --exclude-from="$TMPDIR/${_TNAME_}.excluded" -e "ssh -x $INF_SSH_OPTIONS" \
            "$INF_STORAGE_MACHINE:$INF_STORAGE_DIR/" "$INF_WORK_DIR/"
    if [ $? -eq 0 ]; then
        echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        rm -f $TMPDIR/${_TNAME_}.excluded
        return 0
    fi
    echo "  !failure"

    if [ "$INF_INPUT_MACHINE_ENABLED_FOR_DATA" == "YES" ]; then
        echo "  > rsyncing from the input machine via scp ... "
        echo "    $INF_IW_RSYNCOPTS $INF_INPUT_MACHINE:$INF_INPUT_DIR/ -> $INF_WORK_DIR/"
        echo ""
        $ABS_RSYNC -av $INF_IW_RSYNCOPTS --exclude-from="$TMPDIR/${_TNAME_}.excluded" -e "ssh -x $INF_SSH_OPTIONS" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$INF_INPUT_MACHINE:$INF_INPUT_DIR/" "$INF_WORK_DIR/"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            rm -f $TMPDIR/${_TNAME_}.excluded
            return 0
        fi
        echo "  !failure"
    fi

    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    rm -f $TMPDIR/${_TNAME_}.excluded
    return 1
}

# ==============================================================================

function inf-rsync-to-inputdir()
{
    echo ""
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "= inf-rsync-to-inputdir:"

    # do not copy info file
    echo "${INF_WHOLE_NAME}.info" > $TMPDIR/${_TNAME_}.excluded
    echo "  > Final exclusion list:"
    cat $TMPDIR/${_TNAME_}.excluded | awk '{ printf("    %s\n",$0); }'

    echo ""
    if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
        echo "  > rsyncing to the local mount ... "
        echo "    $INF_WL_RSYNCOPTS $INF_WORK_DIR/ -> $INF_INPUT_DIR/$INF_OUTPUT_SUFFIX/"
        echo ""
        $ABS_RSYNC -av $INF_WL_RSYNCOPTS --exclude-from="$TMPDIR/${_TNAME_}.excluded" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$INF_WORK_DIR/" "$INF_INPUT_DIR/$INF_OUTPUT_SUFFIX/"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            rm -f $TMPDIR/${_TNAME_}.excluded
            return 0
        fi
        echo "  !failure"
    fi

    echo "  > rsyncing to the storage machine via scp ... "
    echo "    $INF_WS_RSYNCOPTS $INF_WORK_DIR/ -> $INF_STORAGE_MACHINE:$INF_STORAGE_DIR/$INF_OUTPUT_SUFFIX/"
    echo ""
    # do not use abs-rsync here, see RT#209118 and RT#209712
    $ABS_RSYNC -av $INF_WS_RSYNCOPTS --exclude-from="$TMPDIR/${_TNAME_}.excluded" -e "ssh -x $INF_SSH_OPTIONS" \
            "$INF_WORK_DIR/" "$INF_STORAGE_MACHINE:$INF_STORAGE_DIR/$INF_OUTPUT_SUFFIX/"
    if [ $? -eq 0 ]; then
        echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        rm -f $TMPDIR/${_TNAME_}.excluded
        return 0
    fi
    echo "  !failure"

    if [ "$INF_INPUT_MACHINE_ENABLED_FOR_DATA" == "YES" ]; then
        echo "  > rsyncing to the input machine via scp ... "
        echo "    $INF_WI_RSYNCOPTS $INF_WORK_DIR/ -> $INF_INPUT_MACHINE:$INF_INPUT_DIR/$INF_OUTPUT_SUFFIX/"
        echo ""
        $ABS_RSYNC -av $INF_WI_RSYNCOPTS --exclude-from="$TMPDIR/${_TNAME_}.excluded" -e "ssh -x $INF_SSH_OPTIONS" \
                --rsync-path="LOC_RSYNC=rsync; if [ -f $ABS_RSYNC ]; then LOC_RSYNC=$ABS_RSYNC; fi; \$LOC_RSYNC" \
                "$INF_WORK_DIR/" "$INF_INPUT_MACHINE:$INF_INPUT_DIR/$INF_OUTPUT_SUFFIX/"
        if [ $? -eq 0 ]; then
            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            rm -f $TMPDIR/${_TNAME_}.excluded
            return 0
        fi
        echo "  !failure"
    fi

    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    rm -f $TMPDIR/${_TNAME_}.excluded
    return 1
}

# ==============================================================================
