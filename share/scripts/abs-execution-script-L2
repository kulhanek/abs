#!/bin/bash
# =============================================================================
# ABS
# (c) 2017, Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2012, Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2008-2009, Petr Kulhanek, kulhanek@chemi.muni.cz
# Charon Extension Layer v0.9
# (c) 2006, Petr Kulhanek, kulhanek@chemi.muni.cz
# Charon Extension Layer v0.8
# (c) 2005, Petr Kulhanek, kulhanek@chemi.muni.cz
# based on LCC module v1 - v5
# (c) 2001-2004, Petr Kulhanek, kulhanek@chemi.muni.cz
# =============================================================================

# -----------------------------------------------------------------------------

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.1: Resources files ..."
echo "# ------------------------------------------------------------------------------"

echo ""
echo "# PBS_NODEFILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "# File: $PBS_NODEFILE"

if ! [ -f "$PBS_NODEFILE" ]; then
    echo ""  >&2
    echo " ERROR: PBS_NODEFILE does not exist!"  >&2
    echo "" >&2
    exit 1
fi

cat "$PBS_NODEFILE"

# create copy of node file
export INF_NODEFILE="$INF_WORK_DIR/${INF_WHOLE_NAME}.nodes"
cat "$PBS_NODEFILE"  > "$INF_NODEFILE"

# ------------------------------------------------------------------------------

echo ""
echo "# INF_MPIFILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
export INF_MPIFILE="$INF_WORK_DIR/${INF_WHOLE_NAME}.mpi"
rm -f "$INF_MPIFILE"

for NODE in $HOSTNAME `cat $INF_NODEFILE | sort -u | grep -v $HOSTNAME`; do
    NCPUS="`cat $INF_NODEFILE | grep $NODE | wc -l`"
    echo "$NODE slots=$NCPUS" >> $INF_MPIFILE
done 

echo "# File: $MPI_NODEFILE"
cat "$MPI_NODEFILE"

# ------------------------------------------------------------------------------

if [ "$INF_NGPUS" -gt 0 ]; then
    export INF_GPUFILE="$INF_WORK_DIR/${INF_WHOLE_NAME}.gpus"
    rm -f "$INF_GPUFILE"
    cat $MPI_NODEFILE | while read NODE MPISPEC; do
        (
            CVD=`pbs_remsh $NODE "echo \$CUDA_VISIBLE_DEVICES"`
            echo "$NODE gpus=$CVD" >> $INF_GPUFILE
         ) < /dev/null
    done 
    echo ""
    echo "# INF_GPUFILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "# File: $INF_GPUFILE"
    cat "$INF_GPUFILE"
fi

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.2: Prepare the working directory ..."
echo "# ------------------------------------------------------------------------------"
echo ""
export INF_MAIN_NODE=`hostname -f`
echo "# Job ID             : $INF_JOB_ID"
echo "# Main working node  : $INF_MAIN_NODE"
echo "# Work directory type: $INF_WORK_DIR_TYPE"
echo "# Data IN copy mode  : $INF_DATAIN"

# ------------------------------------------------------------------------------
# set working directory

INF_WORK_DIR="`$ABS_ROOT/sbin/abs-get-work-dir --type main $INF_WORK_DIR_TYPE`"
if [ $? -ne -0 ]; then
    return 1
fi
echo "# Working directory  : $INF_WORK_DIR"
INF_WORK_DIR="`eval echo "$INF_WORK_DIR"`"
echo "# Working directory  : $INF_WORK_DIR"

# ------------------------------------------------------------------------------
# create working directories if necessary
echo ""
case $INF_DATAIN in
    keep)
        echo ">>> $INF_MAIN_NODE:$INF_WORK_DIR ---"
        timeout 30 df -h
        if [ $? -ne 0 ]; then
            echo ">>> WARNING: the df command was not completed due to an error or timeout."
        fi
    ;;
    copy)
        echo "# Creating working directories on the working nodes ..."
        for NODE_NAME in `cat $PBS_NODEFILE | sort -u`; do
            echo ""
            echo ">>> $NODE_NAME:$INF_WORK_DIR ---"
            ssh -x "$INF_SSH_OPTIONS" $NODE_NAME "timeout 30 df -h; if [ \$? -ne 0 ]; then echo \">>> WARNING: the df command was not completed due to an error or timeout.\"; fi; mkdir -p $INF_WORK_DIR"

            if [ $? -ne 0 ]; then
                echo "" >&2
                echo " ERROR: Unable to create the working directory on the specified node!" >&2
                echo "" >&2
                exit 1
            fi
        done
    ;;
esac

export INF_WORK_DIR

# ------------------------------------------------------------------------------
# go to working directory
echo ""
echo "# Changing the current directory to the working directory ..."
cd "$INF_WORK_DIR"

if [ $? -ne 0 ]; then
    echo "" >&2
    echo " ERROR: Unable to change the current directory to the working directory." >&2
    echo "" >&2
    exit 1
fi

# ------------------------------------------------------------------------------
# move info file to working directory

mv "$TMPDIR/${_TNAME_}.info" "$INF_WORK_DIR/${INF_WHOLE_NAME}.info"
if [ $? -ne 0 ]; then
    echo "" >&2
    echo " ERROR: Unable to move the job info file into the working directory!" >&2
    echo "" >&2
    exit 1
fi

# ------------------------------------------------------------------------------
# update info file

echo ""
echo "# Write the job start and update the info file in the input directory ..."

$ABS_ROOT/sbin/abs-update-infofile start
if [ $? -ne 0 ]; then
    echo "" >&2
    echo " ERROR: Unable to update job status in the job info file!" >&2
    echo "" >&2
    exit 1
fi

case $INF_DATAIN in
    keep)
        echo " > already updated in the keep datain mode ..."
    ;;
    copy)
        inf-retry-cmd inf-copy-to-inputdir "$INF_WORK_DIR/${INF_WHOLE_NAME}.info" "${INF_WHOLE_NAME}.info"
        if [ $? -ne 0 ]; then exit 1; fi
    ;;
esac

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.3: Current node utilizations ..."
echo "# ------------------------------------------------------------------------------"

for NODE_NAME in `cat $INF_NODEFILE | sort -u`; do
    echo ""
    echo ">>> $NODE_NAME ----------------------------------"
    ssh -x "$INF_SSH_OPTIONS" $NODE_NAME "top -b -n 1 | awk '{ if( start == 0 ) print \$0; else if( (\$9 > 1) || (\$10 > 1) ) print \$0; } /   PID USER/ { start = 1; }'"
done

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.4: Current NUMA settings on the master node ..."
echo "# ------------------------------------------------------------------------------"

type numactl &> /dev/null

if [ $? -eq 0 ]; then
    numactl --show
else
    echo ">>> INFO: the numactl command not available ... skipping"
fi

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.5: Machine hardware info ..."
echo "# ------------------------------------------------------------------------------"

echo
echo "# CPU info"
echo "# ============================================================================="
type lscpu &> /dev/null

if [ $? -eq 0 ]; then
    lscpu
else
    echo ">>> INFO: the lscpu command not available ... skipping"
fi

if [ $INF_NGPUS -gt 0 ]; then
    echo ""
    echo "# GPU info"
    echo "# ============================================================================="
    echo "# CUDA_VISIBLE_DEVICES = $CUDA_VISIBLE_DEVICES"
    type nvidia-smi &> /dev/null
    if [ $? -eq 0 ]; then
        nvidia-smi
    fi
fi






