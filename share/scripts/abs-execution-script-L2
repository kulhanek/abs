#!/bin/bash
# =============================================================================
# ABS
# (c) 2024, Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2021, Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2017, Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2012, Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2008-2009, Petr Kulhanek, kulhanek@chemi.muni.cz
# Charon Extension Layer v0.9
# (c) 2006, Petr Kulhanek, kulhanek@chemi.muni.cz
# Charon Extension Layer v0.8
# (c) 2005, Petr Kulhanek, kulhanek@chemi.muni.cz
# based on LCC module v1 - v5
# (c) 2001-2004, Petr Kulhanek, kulhanek@chemi.muni.cz
# =============================================================================

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.0: Cross-host user group translation rules for rsync ..."
echo "# ------------------------------------------------------------------------------"
echo "# Legend: I - input machine; S - storage machine; L - local input directory;"
echo "          W - working directory; FST - file system type"
echo ""

# workdir group
INF_W_GROUP=`id -g -n`

# I->W and W->I
if [ -n "$INF_STORAGE_MACHINE_REALM_FOR_INPUT_MACHINE" ]; then
    INF_IW_RSYNCOPTS="--chown=:$INF_W_GROUP"
    if [ "$INF_USTORAGEGROUP" != "-disabled-"  ]; then
        INF_WI_RSYNCOPTS="--chown=:$INF_USTORAGEGROUP@$INF_STORAGE_MACHINE_REALM_FOR_INPUT_MACHINE"
    else
        INF_WI_RSYNCOPTS=""
    fi
else
    INF_IW_RSYNCOPTS="--chown=:$INF_W_GROUP"
    if [ "$INF_USTORAGEGROUP" != "-disabled-"  ]; then
        INF_WI_RSYNCOPTS="--chown=:$INF_USTORAGEGROUP"
    else
        INF_WI_RSYNCOPTS=""
    fi
fi

# S->W and W->S
INF_SW_RSYNCOPTS="--chown=:$INF_W_GROUP"
if [ "$INF_USTORAGEGROUP" != "-disabled-"  ]; then
    INF_WS_RSYNCOPTS="--chown=:$INF_USTORAGEGROUP"
else
    INF_WS_RSYNCOPTS=""
fi

# L->W and W->L
if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
    INF_LR=`stat "$INF_INPUT_DIR" --format=%G | tr '@' ' ' | awk '{ printf("%s",$2);}'`
    if [ -n "$INF_LR" ]; then
        if [ "$INF_LR" != "$INF_STORAGE_MACHINE_REALM" ]; then
            echo "" >&2
            echo " >>> ERROR: The local input directory realm '$INF_LR' does not match the storage machine realm '$INF_STORAGE_MACHINE_REALM'!" >&2
            echo "" >&2
            exit 1
        fi
        INF_LW_RSYNCOPTS="--chown=:$INF_W_GROUP"
        if [ "$INF_USTORAGEGROUP" != "-disabled-"  ]; then
            INF_WL_RSYNCOPTS="--chown=:$INF_USTORAGEGROUP@$INF_STORAGE_MACHINE_REALM"
        else
            INF_WL_RSYNCOPTS=""
        fi
    else
        INF_LW_RSYNCOPTS="--chown=:$INF_W_GROUP"
        if [ "$INF_USTORAGEGROUP" != "-disabled-"  ]; then
            INF_WL_RSYNCOPTS="--chown=:$INF_USTORAGEGROUP"
        else
            INF_WL_RSYNCOPTS=""
        fi
    fi
fi

export INF_IW_RSYNCOPTS
export INF_WI_RSYNCOPTS
export INF_SW_RSYNCOPTS
export INF_WS_RSYNCOPTS
export INF_LW_RSYNCOPTS
export INF_WL_RSYNCOPTS

echo "I->W : $INF_IW_RSYNCOPTS"
echo "W->I : $INF_WI_RSYNCOPTS"
echo "S->W : $INF_SW_RSYNCOPTS"
echo "W->S : $INF_WS_RSYNCOPTS"
echo "L->W : $INF_LW_RSYNCOPTS"
echo "W->L : $INF_WL_RSYNCOPTS"

INF_L_FSTYPE="n.a."
if [ "$INF_LOCAL_INPUT_DATA" == "YES" ]; then
    # %m does not work in IT4I
    # INF_L_MP=`stat "$INF_INPUT_DIR" --format="%m"`

    # is local input directory of nfs4:krb5 type?
    INF_L_DEV=`stat "$INF_INPUT_DIR" --format="%d"`
    INF_L_DEV_MAJ=$(($INF_L_DEV / 256))
    INF_L_DEV_MIN=$(($INF_L_DEV % 256))

    if [ -n "`grep \"$INF_L_DEV_MAJ:$INF_L_DEV_MIN\" /proc/self/mountinfo | grep 'sec=krb5'`" ]; then
        INF_L_FSTYPE="nfs4:krb5"
    else
        INF_L_FSTYPE=`grep "$INF_L_DEV_MAJ:$INF_L_DEV_MIN" /proc/self/mountinfo | awk '{ for(i=1; i<=NF; i++){ if( $i == "-" ) break; } i++; { print $i; } }' | head -1`
    fi
    unset INF_L_DEV INF_L_DEV_MAJ INF_L_DEV_MIN
fi
export INF_L_FSTYPE
echo "L FST: $INF_L_FSTYPE"

INF_INPUT_MACHINE_ENABLED_FOR_DATA_NOTICE=""
if [ "$INF_INPUT_MACHINE" != "$INF_STORAGE_MACHINE" ]; then
    INF_INPUT_MACHINE_ENABLED_FOR_DATA="YES"
else
    INF_INPUT_MACHINE_ENABLED_FOR_DATA="NO"
    INF_INPUT_MACHINE_ENABLED_FOR_DATA_NOTICE="(input machine is the same as the storage machine)"
fi
INF_INPUT_MACHINE_ENABLED_FOR_EXEC=YES
if [ "$INF_BATCH_SERVER_GROUPNS" != "personal" ]; then
    if [ "$INF_INPUT_MACHINE_GROUPNS" == "personal" ]; then
        # if the job is sent outside of personal machine then we cannot expect
        # that the personal machine will be still on at the end of job and thus available for data transfer
        INF_INPUT_MACHINE_ENABLED_FOR_DATA="NO"
        INF_INPUT_MACHINE_ENABLED_FOR_EXEC="NO"
        INF_INPUT_MACHINE_ENABLED_FOR_DATA_NOTICE="(input machine is in a personal site)"
    fi
fi
echo ""
export INF_INPUT_MACHINE_ENABLED_FOR_DATA
echo "# Input machine enabled for data : $INF_INPUT_MACHINE_ENABLED_FOR_DATA $INF_INPUT_MACHINE_ENABLED_FOR_DATA_NOTICE"
export INF_INPUT_MACHINE_ENABLED_FOR_EXEC
echo "# Input machine enabled for exec : $INF_INPUT_MACHINE_ENABLED_FOR_EXEC"

unset INF_INPUT_MACHINE_ENABLED_FOR_DATA_NOTICE

# INF_SURROGATE_MACHINES is set in abs-restore-env

if [ -z "$INF_SURROGATE_MACHINES" ]; then
echo "# Surrogate machines for exec    : -none-"
else
echo "# Surrogate machines for exec    : $INF_SURROGATE_MACHINES"
fi

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.1: Prepare the working directory ..."
echo "# ------------------------------------------------------------------------------"
echo ""
export INF_MAIN_NODE=`hostname -f`
echo "# Job ID             : $INF_JOB_ID"
echo "# Main working node  : $INF_MAIN_NODE"
echo "# Work directory type: $INF_WORK_DIR_TYPE"
echo "# Data IN copy mode  : $INF_DATAIN"

# ------------------------------------------------------------------------------
# get working directory

INF_WORK_DIR="`$ABS_ROOT/sbin/abs-get-work-dir --type main $INF_WORK_DIR_TYPE`"
if [ $? -ne -0 ]; then
    return 1
fi
echo "# Working directory  : $INF_WORK_DIR"
INF_WORK_DIR="`eval echo "$INF_WORK_DIR"`"
echo "# Working directory  : $INF_WORK_DIR"
export INF_WORK_DIR

# ------------------------------------------------------------------------------
# create working directories if necessary

echo ""
case $INF_DATAIN in
    keep)
        echo "# Already in the working directory on the main working node ..."
    ;;
    copy-shared)
        echo "# Creating the working directory on the main working node ..."
        echo "  >>> $INF_MAIN_NODE:$INF_WORK_DIR ---"
        (
            umask $INF_UMASK
            if ! [ -d "$INF_WORK_DIR" ]; then
                mkdir -p "$INF_WORK_DIR"
            fi
            # the ownership should be INF_BATCHGROUP as the directory is created by the main job process
        )
        if [ $? -ne 0 ]; then
            echo "" >&2
            echo " >>> ERROR: Unable to create the working directory on the main node!" >&2
            echo "" >&2
            exit 1
        fi
    ;;
    copy-master)
            echo "# Creating working directories on the working nodes ..."
            if [[ $INF_NNODES -eq 1 ]]; then
                echo "  >>> $INF_MAIN_NODE:$INF_WORK_DIR ---"
                umask "$INF_UMASK"
                if ! [ -d "$INF_WORK_DIR" ]; then
                    mkdir -p "$INF_WORK_DIR"
                fi
                if [ $? -ne 0 ]; then
                    echo "" >&2
                    echo " >>> ERROR: Unable to create the working directory on the specified node!" >&2
                    echo "" >&2
                    exit 1
                fi
                if [ -n "$INF_UBATCHGROUP" ]; then
                    chgrp "$INF_BATCHGROUP" "$INF_WORK_DIR"
                fi
            else
                for NODE_NAME in `cat $PBS_NODEFILE | sort -u`; do
                    echo "  >>> $NODE_NAME:$INF_WORK_DIR ---"
                    ssh -x "$INF_SSH_OPTIONS" $NODE_NAME "umask $INF_UMASK; if ! [ -d \"$INF_WORK_DIR\" ]; then mkdir -p \"$INF_WORK_DIR\"; fi; EXIT_CODE=\$?; if [ -n \"$INF_UBATCHGROUP\" ]; then chgrp \"$INF_BATCHGROUP\" \"$INF_WORK_DIR\"; fi; exit \$EXIT_CODE;"

                    if [ $? -ne 0 ]; then
                        echo "" >&2
                        echo " >>> ERROR: Unable to create the working directory on the specified node!" >&2
                        echo "" >&2
                        exit 1
                    fi
                done
            fi
    ;;
esac

# ------------------------------------------------------------------------------
# go to working directory
echo ""
echo "# Changing the current directory to the working directory ..."
cd "$INF_WORK_DIR"

if [ $? -ne 0 ]; then
    echo "" >&2
    echo " >>> ERROR: Unable to change the current directory to the working directory." >&2
    echo "" >&2
    exit 1
fi

# ------------------------------------------------------------------------------
# get tmp directory

INF_TMP_DIR="`$ABS_ROOT/sbin/abs-get-work-dir --type tmp $INF_WORK_DIR_TYPE`"
if [ $? -ne -0 ]; then
    return 1
fi
echo ""
echo "# Tmp directory      : $INF_TMP_DIR"
INF_TMP_DIR="`eval echo "$INF_TMP_DIR"`"
echo "# Tmp directory      : $INF_TMP_DIR"
export INF_TMP_DIR

# ------------------------------------------------------------------------------
# create tmp directories if necessary

echo ""
case $INF_DATAIN in
    keep)
        echo "# In the datain keep mode, we use standard TMP directory ..."
    ;;
    copy-shared)
        echo "# Creating the TMP directory on the main working node ..."
        echo "  >>> $INF_MAIN_NODE:$INF_TMP_DIR ---"
        (
            umask $INF_UMASK
            if ! [ -d "$INF_TMP_DIR" ]; then
                mkdir -p "$INF_TMP_DIR"
            fi
            # the ownership should be INF_BATCHGROUP as the directory is created by the main job process
        )
        if [ $? -ne 0 ]; then
            echo "" >&2
            echo " >>> ERROR: Unable to create the TMP directory on the main node!" >&2
            echo "" >&2
            exit 1
        fi
        export TMP=$INF_TMP_DIR
        export TMPDIR=$INF_TMP_DIR
        export TEMP=$INF_TMP_DIR
    ;;
    copy-master)
            echo "# Creating TMP directories on the working nodes ..."
            if [[ $INF_NNODES -eq 1 ]]; then
                echo "  >>> $INF_MAIN_NODE:$INF_TMP_DIR ---"
                umask "$INF_UMASK"
                if ! [ -d "$INF_TMP_DIR" ]; then
                    mkdir -p "$INF_TMP_DIR"
                fi
                if [ $? -ne 0 ]; then
                    echo "" >&2
                    echo " >>> ERROR: Unable to create the TMP directory on the specified node!" >&2
                    echo "" >&2
                    exit 1
                fi
                if [ -n "$INF_UBATCHGROUP" ]; then
                    chgrp "$INF_BATCHGROUP" "$INF_TMP_DIR"
                fi
            else
                for NODE_NAME in `cat $PBS_NODEFILE | sort -u`; do
                    echo "  >>> $NODE_NAME:$INF_TMP_DIR ---"
                    ssh -x "$INF_SSH_OPTIONS" $NODE_NAME "umask $INF_UMASK; if ! [ -d \"$INF_TMP_DIR\" ]; then mkdir -p \"$INF_TMP_DIR\"; fi; EXIT_CODE=\$?; if [ -n \"$INF_UBATCHGROUP\" ]; then chgrp \"$INF_BATCHGROUP\" \"$INF_TMP_DIR\"; fi; exit \$EXIT_CODE;"

                    if [ $? -ne 0 ]; then
                        echo "" >&2
                        echo " >>> ERROR: Unable to create the TMP directory on the specified node!" >&2
                        echo "" >&2
                        exit 1
                    fi
                done
            fi
        # FIXME - we should instruct processes on other nodes to honor these variables (via mpirun?)
        export TMP=$INF_TMP_DIR
        export TMPDIR=$INF_TMP_DIR
        export TEMP=$INF_TMP_DIR
    ;;
esac

# ------------------------------------------------------------------------------

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.2: Pre-init working directory ..."
echo "# ------------------------------------------------------------------------------"
echo ""

INF_WORK_PREINIT="`$ABS_ROOT/sbin/abs-get-work-dir --type preinit $INF_WORK_DIR_TYPE`"

if [ -n "$INF_WORK_PREINIT" ]; then
echo "# Preinit script     : $INF_WORK_PREINIT"

case $INF_DATAIN in
    keep|copy-shared)
        echo ""
        echo ">>> $INF_MAIN_NODE:$INF_WORK_DIR ---"
        eval "$INF_WORK_PREINIT"
        if [ $? -ne 0 ]; then
            echo "" >&2
            echo " >>> ERROR: Unable to pre-init the working directory on the specified node!" >&2
            echo "" >&2
            exit 1
        fi
    ;;
    copy-master)
        if [[ $INF_NNODES -eq 1 ]]; then
            echo ""
            echo ">>> $INF_MAIN_NODE:$INF_WORK_DIR ---"
            (
                eval "$INF_WORK_PREINIT"
            )
        else
            for NODE_NAME in `cat $PBS_NODEFILE | sort -u`; do
                echo ""
                echo ">>> $NODE_NAME:$INF_WORK_DIR ---"
                ssh -x "$INF_SSH_OPTIONS" $NODE_NAME "export INF_WORK_DIR=$INF_WORK_DIR; eval \"$INF_WORK_PREINIT\""
                if [ $? -ne 0 ]; then
                    echo "" >&2
                    echo " >>> ERROR: Unable to pre-init the working directory on the specified node!" >&2
                    echo "" >&2
                    exit 1
                fi
            done
        fi

    ;;
esac
else
echo "# Preinit script     : -nothing to setup-"
fi

# ------------------------------------------------------------------------------
# move info file to working directory

mv "$TMP_INFO_FILE" "$INF_WORK_DIR/${INF_WHOLE_NAME}.info"
if [ $? -ne 0 ]; then
    echo "" >&2
    echo " >>> ERROR: Unable to move the job info file into the working directory!" >&2
    echo "" >&2
    exit 1
fi

# ------------------------------------------------------------------------------
# filesystem status

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.3: Filesystem states  ..."
echo "# ------------------------------------------------------------------------------"

if [[ $INF_NNODES -eq 1 ]]; then
    echo ""
    echo ">>> $INF_MAIN_NODE ---"
    timeout 30 df -h
    if [ $? -ne 0 ]; then
        echo ">>> WARNING: the df command was not completed due to an error or timeout."
    fi
else
    for NODE_NAME in `cat $PBS_NODEFILE | sort -u`; do
        echo ""
        echo ">>> $NODE_NAME ---"
        ssh -x "$INF_SSH_OPTIONS" $NODE_NAME "timeout 30 df -h; if [ \$? -ne 0 ]; then echo \">>> WARNING: the df command was not completed due to an error or timeout.\"; fi;"
    done
fi

# ------------------------------------------------------------------------------

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.4: Resources files ..."
echo "# ------------------------------------------------------------------------------"

echo ""
echo "# PBS_NODEFILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "# File: $PBS_NODEFILE"

if ! [ -f "$PBS_NODEFILE" ]; then
    echo ""  >&2
    echo " >>> ERROR: PBS_NODEFILE does not exist!"  >&2
    echo "" >&2
    exit 1
fi

cat "$PBS_NODEFILE"

# create copy of node file
export INF_NODEFILE="$INF_WORK_DIR/${INF_WHOLE_NAME}.nodes"
cat "$PBS_NODEFILE"  > "$INF_NODEFILE"
if [ $? -ne 0 ]; then exit 1; fi

# ------------------------------------------------------------------------------

echo ""
echo "# INF_MPIFILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
export INF_MPIFILE="$INF_WORK_DIR/${INF_WHOLE_NAME}.mpinodes"
rm -f "$INF_MPIFILE"
export HOSTNAME=`hostname -f`

INF_MPI_NCPUS=0

for NODE in $HOSTNAME `cat "$INF_NODEFILE" | sort -u | grep -v "$HOSTNAME"`; do
    if [ -z "$INF_MPI_SLOTS_PER_NODE" ]; then
        NCPUS="`cat $INF_NODEFILE | grep $NODE | wc -l`"
    else
        NCPUS=$INF_MPI_SLOTS_PER_NODE
    fi
    ((INF_MPI_NCPUS = INF_MPI_NCPUS + NCPUS))
    echo "$NODE slots=$NCPUS" >> "$INF_MPIFILE"
    if [ $? -ne 0 ]; then exit 1; fi
done 

echo "# File: $INF_MPIFILE"
cat "$INF_MPIFILE"
if [ $? -ne 0 ]; then exit 1; fi

# ------------------------------------------------------------------------------

if [ "$INF_NGPUS" -gt 0 ]; then
    echo ""
    export INF_GPUFILE="$INF_WORK_DIR/${INF_WHOLE_NAME}.gpus"
    rm -f "$INF_GPUFILE"
            echo    "# This node hostname: $INF_MAIN_NODE"
    if [ $INF_NNODES -ne 1 ]; then
        cat $INF_MPIFILE | while read NODE MPISPEC; do
            (
                # this is quite complicated because both pbsdsh and pbs_tmrsh write output directly to output and error files of PBS
                # and not to the standard and error streams, RT#196359
                echo -n "# Scanning GPU node : $NODE"
                pbs_tmrsh $NODE sh -c "echo \$(hostname -f) gpus=\$CUDA_VISIBLE_DEVICES | ssh $HOSTNAME \"cat >> $INF_GPUFILE\""
                echo " -> exit code: $?"
             ) < /dev/null
        done
    fi
    if ! [ -f "$INF_GPUFILE" ]; then
        # file was not created - try some fallback, RT#475300
        # we cannot create INF_GPUFILE if more than 2 nodes were allocated
        if [ $INF_NNODES -gt 1 ]; then
            echo "" >&2
            echo " >>> ERROR: INF_GPUFILE was not created due to computational node(s) misconfiguration!" >&2
            echo "            As you reqested more than one computational node this error cannot be bypassed." >&2
            echo "" >&2
            exit 1
        fi
        # fallback for single node allocation
        echo "# WARNING: Employing single node fallback for INF_GPUFILE creation ..."
        echo "$INF_MAIN_NODE gpus=$CUDA_VISIBLE_DEVICES" >> $INF_GPUFILE
    fi
    echo "# INF_GPUFILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "# File: $INF_GPUFILE"
    cat "$INF_GPUFILE"
    if [ $? -ne 0 ]; then exit 1; fi
else
    # disable GPU use
    CUDA_VISIBLE_DEVICES=""
    export CUDA_VISIBLE_DEVICES
fi

# ------------------------------------------------------------------------------
# update info file

echo ""
echo "# Write the job start and update the info file in the input directory ..."

$ABS_ROOT/sbin/abs-update-infofile start
if [ $? -ne 0 ]; then
    echo "" >&2
    echo " >>> ERROR: Unable to update job status in the job info file!" >&2
    echo "" >&2
    exit 1
fi

case $INF_DATAIN in
    keep)
        echo " > already updated in the keep datain mode ..."
    ;;
    copy-master|copy-shared)
        inf-retry-cmd inf-copy-to-inputdir "$INF_WORK_DIR/${INF_WHOLE_NAME}.info" "${INF_WHOLE_NAME}.info"
        if [ $? -ne 0 ]; then exit 1; fi
    ;;
esac

# ------------------------------------------------------------------------------
# randomize job start, RT#1094208
if [[ (-n "$INF_RANDOMIZE") && (INF_RANDOMIZE -gt 0) ]]; then
    echo "#"
    echo "# Randomizing job startup in $INF_RANDOMIZE seconds window!"
    ((_TR = RANDOM % INF_RANDOMIZE))
    echo "# Random start offset is $_TR seconds, sleeping now ..." | tee "$INF_WORK_DIR/__RANDOMIZING_JOB_START__"
    sleep $_TR
    unset _TR
    rm -f "$INF_WORK_DIR/__RANDOMIZING_JOB_START__"
fi

# ------------------------------------------------------------------------------
# various statistics

# ------------------------------------------------------------------------------
# determine INF_MAX_WALLTIME from the job stat
export INF_MAX_WALLTIME=`pqstat -j $INF_JOB_ID | grep Resource_List.walltime | awk '{print $3;}' | tr ":" " " | awk '{ print $1*3600 + $2*60 + $3;}'`

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.5: Current node utilizations ..."
echo "# ------------------------------------------------------------------------------"

if [[ $INF_NNODES -eq 1 ]]; then
    echo ""
    echo ">>> $INF_MAIN_NODE ----------------------------------"
    top -b -n 1 | awk '{ if( start == 0 ) print $0; else if( ($9 > 1) || ($10 > 1) ) print $0; } /PID USER/ { start = 1; }'
else
    for NODE_NAME in `cat $INF_NODEFILE | sort -u`; do
        echo ""
        echo ">>> $NODE_NAME ----------------------------------"
        ssh -x "$INF_SSH_OPTIONS" $NODE_NAME "top -b -n 1 | awk '{ if( start == 0 ) print \$0; else if( (\$9 > 1) || (\$10 > 1) ) print \$0; } /PID USER/ { start = 1; }'"
    done
fi

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.6: Machine hardware info ..."
echo "# ------------------------------------------------------------------------------"

echo
echo "# CPU info (All CPUs)"
echo "# ============================================================================="
LSCPU=`type -P lscpu 2> /dev/null`

if [ -n "$LSCPU" ]; then
    if [[ $INF_NNODES -eq 1 ]]; then
        echo ""
        echo ">>> $INF_MAIN_NODE ---"
        "$LSCPU"
    else
        for NODE_NAME in `cat $INF_NODEFILE | sort -u`; do
            echo ""
            echo ">>> $NODE_NAME ---"
            ssh -x "$INF_SSH_OPTIONS" "$NODE_NAME" "$LSCPU"
        done
    fi
else
    echo ">>> INFO: the lscpu command not available ... skipping"
fi

echo ""
echo "# GPU info (ALL GPUs)"
echo "# ============================================================================="
type nvidia-smi &> /dev/null
if [ $? -eq 0 ]; then
    if [[ $INF_NNODES -eq 1 ]]; then
        echo ""
        echo ">>> $INF_MAIN_NODE ---"
        (
            unset CUDA_VISIBLE_DEVICES
            nvidia-smi
        )
    else
        for NODE_NAME in `cat $INF_NODEFILE | sort -u`; do
            echo ""
            echo ">>> $NODE_NAME ---"
            # CUDA_VISIBLE_DEVICES is ignored by nvidia-smi but unset it for sure
            ssh -x "$INF_SSH_OPTIONS" $NODE_NAME "unset CUDA_VISIBLE_DEVICES; nvidia-smi"
        done
    fi
else
    echo ">>> INFO: the nvidia-smi command is not available ... skipping"
fi

echo
echo "# infiniband (fast interconnect)"
echo "# ============================================================================="
type ibv_devinfo &> /dev/null

if [ $? -eq 0 ]; then
    if [[ $INF_NNODES -eq 1 ]]; then
        echo ""
        echo ">>> $INF_MAIN_NODE ---"
        ibv_devinfo
    else
        for NODE_NAME in `cat $INF_NODEFILE | sort -u`; do
            echo ""
            echo ">>> $NODE_NAME ---"
            ssh -x "$INF_SSH_OPTIONS" $NODE_NAME ibv_devinfo
        done
    fi
else
    echo ">>> INFO: the ibv_devinfo command is not available ... skipping"
fi

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.7: Machine software info ..."
echo "# ------------------------------------------------------------------------------"

echo
echo "# ulimit (main process via pbs_mom)"
echo "# ============================================================================="
type ulimit &> /dev/null

if [ $? -eq 0 ]; then
    echo ""
    echo ">>> `hostname -f` ---"
    ulimit -a
else
    echo ">>> INFO: the ulimit command not available ... skipping"
fi

echo
echo "# ulimit (computational nodes via pam_limits)"
echo "# ============================================================================="
type ulimit &> /dev/null

if [ $? -eq 0 ]; then
    if [[ $INF_NNODES -eq 1 ]]; then
        echo ""
        echo ">>> $INF_MAIN_NODE ---"
        ulimit -S -a
    else
        for NODE_NAME in `cat $INF_NODEFILE | sort -u`; do
            echo ""
            echo ">>> $NODE_NAME ---"
            ssh -x "$INF_SSH_OPTIONS" $NODE_NAME ulimit -S -a
        done
    fi
else
    echo ">>> INFO: the ulimit command not available ... skipping"
fi

echo
echo "# IPCs"
echo "# ============================================================================="
type ipcs &> /dev/null

if [ $? -eq 0 ]; then
    if [[ $INF_NNODES -eq 1 ]]; then
        echo ""
        echo ">>> $INF_MAIN_NODE ---"
        ipcs
    else
        for NODE_NAME in `cat $INF_NODEFILE | sort -u`; do
            echo ""
            echo ">>> $NODE_NAME ---"
            ssh -x "$INF_SSH_OPTIONS" $NODE_NAME ipcs
        done
    fi
else
    echo ">>> INFO: the ipcs command not available ... skipping"
fi

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.8a: Current NUMA settings on the master node ..."
echo "# ------------------------------------------------------------------------------"

amsmodule add hwloc

NUMACTL=`type -P numactl 2> /dev/null`

if [ -n "$NUMACTL" ]; then
    $NUMACTL --show
else
    echo ">>> INFO: the numactl command not available ... skipping"
fi

LSTOPO=`type -P lstopo 2> /dev/null`

if [ -n "$LSTOPO" ]; then
    echo
    $LSTOPO
else
    echo ">>> INFO: the lstopo command not available ... skipping"
fi

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.8b: Current NUMA settings on all nodes ..."
echo "# ------------------------------------------------------------------------------"

# create hwtopology file
export INF_HWTOPO="$INF_WORK_DIR/${INF_WHOLE_NAME}.hwtopo"
rm -f "$INF_HWTOPO"

if [ "$INF_NNODES" -ne 1 ]; then
    cat $INF_MPIFILE | while read NODE MPISPEC; do
        (
            # this is quite complicated because both pbsdsh and pbs_tmrsh write output directly to output and error files of PBS
            # and not to the standard and error streams, RT#196359
            echo -n "# Scanning node : $NODE"
            echo "# == $NODE" >> "$INF_HWTOPO"
            echo -n ">>>> CPU set: " >> "$INF_HWTOPO"
                pbs_tmrsh $NODE sh -c "cat /proc/self/cpuset | ssh $HOSTNAME \"cat >> $INF_HWTOPO\""
            echo ">>>> CPU Info ..." >> "$INF_HWTOPO"
            if [ -n "$LSCPU" ]; then
                pbs_tmrsh $NODE sh -c "$LSCPU | ssh $HOSTNAME \"cat >> $INF_HWTOPO\""
            else
                echo "  > not available ..." >> "$INF_HWTOPO"
            fi
            echo ">>>> NUMA topology ..." >> "$INF_HWTOPO"
            if [ -n "$NUMACTL" ]; then
                pbs_tmrsh $NODE sh -c "$NUMACTL --show | ssh $HOSTNAME \"cat >> $INF_HWTOPO\""
            else
                echo "  > not available ..." >> "$INF_HWTOPO"
            fi
            echo ">>>> HWLOC topology ..." >> "$INF_HWTOPO"
            if [ -n "$LSTOPO" ]; then
                pbs_tmrsh $NODE sh -c "$LSTOPO --output-format console | ssh $HOSTNAME \"cat >> $INF_HWTOPO\""
            else
                echo "  > not available ..." >> "$INF_HWTOPO"
            fi
            echo " -> exit code: $?"
            echo "# ------------------------------------------------------------------------------" >> "$INF_HWTOPO"
         ) < /dev/null
    done
else
    NODE=$INF_MAIN_NODE
    echo -n "# Scanning node : $NODE"
    echo "# == $NODE" >> "$INF_HWTOPO"
    echo -n ">>>> CPU set: " >> "$INF_HWTOPO"
    cat /proc/self/cpuset >> "$INF_HWTOPO"
    echo ">>>> CPU Info ..." >> "$INF_HWTOPO"
    if [ -n "$LSCPU" ]; then
        $LSCPU >> "$INF_HWTOPO"
    else
        echo "  > not available ..." >> "$INF_HWTOPO"
    fi
    echo ">>>> NUMA topology ..." >> "$INF_HWTOPO"
    if [ -n "$NUMACTL" ]; then
        $NUMACTL --show >> "$INF_HWTOPO"
    else
        echo "  > not available ..." >> "$INF_HWTOPO"
    fi
    echo ">>>> HWLOC topology ..." >> "$INF_HWTOPO"
    if [ -n "$LSTOPO" ]; then
        $LSTOPO --output-format console >> "$INF_HWTOPO"
    else
        echo "  > not available ..." >> "$INF_HWTOPO"
    fi
    echo "# ------------------------------------------------------------------------------" >> "$INF_HWTOPO"
fi

echo ""
echo "# INF_HWTOPO ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "# File: $INF_HWTOPO"
cat "$INF_HWTOPO"
if [ $? -ne 0 ]; then exit 1; fi

unset LSTOPO LSCPU NUMACTL

# ------------------------------------------------------------------------------
# MPI setup

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.9: Determining type of executive environment ..."
echo "#       Supported types: raw, cpuset, exclusive"
echo "# ------------------------------------------------------------------------------"

#determine INF_EXEC_TYPE -------------------------------------------------------

echo ""
echo "# Summary of execution nodes with assigned slots ..."
echo "# pnodes -j "$INF_JOB_ID" --jobs"

pnodes -j "$INF_JOB_ID" --jobs

if [ $? -ne 0 ]; then
    # RT#687751
    echo ">>> WARNING: Trying again after 60s ...."
    sleep 60
    pnodes -j "$INF_JOB_ID" --jobs --verbose
fi

echo ""
echo "# Maximum of available resources  ..."
echo "# pnodes -j "$INF_JOB_ID" --stat"

INF_MAX_NCPUS=0
INF_MAX_NGPUS=0

# see RT#229993 for possible problems with temporary file name
INF_NODE_TMP="/tmp/${USER}.$$.nodeinfo"

# node stat
pnodes -j "$INF_JOB_ID" --stat > $INF_NODE_TMP

if [ $? -ne 0 ]; then
    # RT#687751
    echo ">>> WARNING: Trying again after 60s ...."
    sleep 60
    pnodes -j "$INF_JOB_ID" --stat --verbose > $INF_NODE_TMP
fi

cat $INF_NODE_TMP

INF_MAX_NCPUS=`grep ntotcpus $INF_NODE_TMP | awk '{ print $2; }'`

if [ -z "$INF_MAX_NCPUS" ]; then
    echo "" >&2
    echo " >>> ERROR: INF_MAX_NCPUS is not set properly!" >&2
    echo "            Please send contents of this output to the site support: $AMS_SITE_SUPPORT" >&2
    echo "" >&2
    exit 1
fi

INF_MAX_NGPUS=`grep ntotgpus $INF_NODE_TMP | awk '{ print $2; }'`
if [ -z "$INF_MAX_NCPUS" ]; then
    echo "" >&2
    echo " >>> ERROR: INF_MAX_NGPUS is not set properly!" >&2
    echo "            Please send contents of this output to the site support: $AMS_SITE_SUPPORT" >&2
    echo "" >&2
    exit 1
fi

rm -f "$INF_NODE_TMP"
unset INF_NODE_TMP

# encode cpusets
read INF_CPUSET < /proc/self/cpuset

if [ "$INF_MAX_NCPUS" -eq "$INF_NCPUS" ]; then
    INF_EXEC_TYPE="exclusive"
else
    if [ "$INF_CPUSET" != "/" ]; then
        INF_EXEC_TYPE="cpuset"
    else
        INF_EXEC_TYPE="raw"
    fi
fi

# setup OpenMPI ----------------------------------------------------------------

if [ "$INF_MPI_NCPUS" == "$INF_NCPUS" ]; then
    # all CPUs
    case "$INF_EXEC_TYPE" in
        cpuset|exclusive)
            export INF_OPENMPI1_SPEC="-report-bindings -bind-to-core"
            export INF_OPENMPI2_SPEC="-display-allocation -display-map -rank-by core -map-by core -bind-to core"
            export INF_OPENMPI3_SPEC="-display-allocation -display-map -rank-by core -map-by core -bind-to core"
            ;;
        raw)
            export INF_OPENMPI1_SPEC="-report-bindings -bind-to-core"
            export INF_OPENMPI2_SPEC="-display-allocation -display-map -rank-by slot -map-by slot -bind-to none"
            export INF_OPENMPI3_SPEC="-display-allocation -display-map -rank-by slot -map-by slot -bind-to none"
            ;;
    esac
else
    # number of used CPUs is smaller, map by socket to evenly distribute processes
    case "$INF_EXEC_TYPE" in
        cpuset|exclusive)
            export INF_OPENMPI1_SPEC="--not-supported-by-infinity"
            export INF_OPENMPI2_SPEC="-display-allocation -display-map -rank-by slot -map-by socket -bind-to core"
            export INF_OPENMPI3_SPEC="-display-allocation -display-map -rank-by slot -map-by socket -bind-to core"
            ;;          
        *)
            echo "" >&2
            echo " >>> ERROR: Unsupported OpenMPI mode (INF_MPI_SLOTS_PER_NODE requires cpuset or exclusive allocation)!" >&2
            echo "" >&2
            exit 1
        ;;
    esac
fi

export INF_MAX_NCPUS
export INF_CPUSET
export INF_EXEC_TYPE
export INF_MPI_NCPUS

# final reporting --------------------------------------------------------------

echo ""
echo "INF_NNODES             = $INF_NNODES"
echo "INF_MAX_NCPUS          = $INF_MAX_NCPUS"
echo "INF_NCPUS              = $INF_NCPUS"
echo "INF_MAX_NGPUS          = $INF_MAX_NGPUS"
echo "INF_NGPUS              = $INF_NGPUS"
echo "INF_MPI_SLOTS_PER_NODE = $INF_MPI_SLOTS_PER_NODE"
echo "INF_MPI_NCPUS          = $INF_MPI_NCPUS"
echo "INF_CPUSET             = $INF_CPUSET"
echo "INF_EXEC_TYPE          = $INF_EXEC_TYPE"
echo "INF_OPENMPI1_SPEC      = $INF_OPENMPI1_SPEC"
echo "INF_OPENMPI2_SPEC      = $INF_OPENMPI2_SPEC"
echo "INF_OPENMPI3_SPEC      = $INF_OPENMPI3_SPEC"

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.10: Check HW resources oversubscription ..."
echo "# ------------------------------------------------------------------------------"

if [[ $INF_NCPUS -gt $INF_MAX_NCPUS ]]; then
    printf "# Requested CPUs: %3d > All available CPUs: %3d\n" "$INF_NCPUS" "$INF_MAX_NCPUS"
      echo "" >&2
      echo " >>> ERROR: Aborting job due to CPU request oversubscription (this should not happen)!" >&2
      echo "                           *** REACTIVATE Infinity at this site ***                   " >&2
      echo "            If the problem persists, send contents of this output to the site support: $AMS_SITE_SUPPORT" >&2
      echo "" >&2
    exit 1
else
    printf "# Requested CPUs: %3d <= All available CPUs: %3d\n" "$INF_NCPUS" "$INF_MAX_NCPUS"
fi

if [[ $INF_NGPUS -gt $INF_MAX_NGPUS ]]; then
    printf "# Requested GPUs: %3d > All available GPUs: %3d\n" "$INF_NGPUS" "$INF_MAX_NGPUS"
      echo "" >&2
      echo " >>> ERROR: Aborting job due to GPU request oversubscription (this should not happen)!" >&2
      echo "                           *** REACTIVATE Infinity at this site ***                   " >&2
      echo "            If the problem persists, send contents of this output to the site support: $AMS_SITE_SUPPORT" >&2
      echo "" >&2
    exit 1
else
    printf "# Requested GPUs: %3d <= All available GPUs: %3d\n" "$INF_NGPUS" "$INF_MAX_NGPUS"
fi

# ------------------------------------------------------------------------------
# list environment

echo ""
echo "# ------------------------------------------------------------------------------"
echo "# L2.11: Job environment summary ..."
echo "# ------------------------------------------------------------------------------"

echo "# Variable                     Value                                            "
echo "# ---------------------------- -------------------------------------------------"
set | grep ^INF_    | sed -s 's/=/ /1'| awk '{ printf("%-30s",$1); for(i=2;i<=NF;i++) printf(" %s",$i); printf("\n"); }'
set | grep ^AMS_    | sed -s 's/=/ /1'| awk '{ printf("%-30s",$1); for(i=2;i<=NF;i++) printf(" %s",$i); printf("\n"); }'
set | grep ^PBS_    | sed -s 's/=/ /1'| awk '{ printf("%-30s",$1); for(i=2;i<=NF;i++) printf(" %s",$i); printf("\n"); }'
set | grep ^TORQUE_ | sed -s 's/=/ /1'| awk '{ printf("%-30s",$1); for(i=2;i<=NF;i++) printf(" %s",$i); printf("\n"); }'
set | grep CUDA     | sed -s 's/=/ /1'| awk '{ printf("%-30s",$1); for(i=2;i<=NF;i++) printf(" %s",$i); printf("\n"); }'

# ------------------------------------------------------------------------------

# FIXME - compatibility mode - set them here so they are not visible in the above lists
export AMS_NCPU=$INF_NCPUS
export AMS_NGPU=$INF_NGPUS
export AMS_NNODE=$INF_NNODES

export INF_NCPU=$INF_NCPUS
export INF_NGPU=$INF_NGPUS
export INF_NNODE=$INF_NNODES

export INF_JOB_PATH=$INF_INPUT_DIR
export INF_JOB_MACHINE=$INF_INPUT_MACHINE






